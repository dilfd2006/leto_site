services:
  #bot
  bot:
      container_name: bot
      build:
        context: .
        dockerfile: ./docker/Dockerfile.bot
      env_file:
        - ./.env
      volumes:
        - ./:/app
      depends_on:
        api:
          condition: service_healthy
  #api
  api:
      container_name: api
      build:
        context: .
        dockerfile: ./docker/Dockerfile.api
      env_file:
        - ./.env
      volumes:
        - ./:/app
      depends_on:
        postgres:
          condition: service_healthy

  #migrations
  postgres:
      container_name: db
      image: postgres:16.10-alpine3.22
      volumes:
        - ./docker/postgresql.conf:/etc/postgresql.conf:ro
        - db_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        PGDATA: /var/lib/postgresql/data/pgdata
      command: >
        postgres -c config_file=/etc/postgresql.conf
      ports:
        - ${POSTGRES_PORT}:5432
      networks:
        - postgres
      restart: unless-stopped
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 5s